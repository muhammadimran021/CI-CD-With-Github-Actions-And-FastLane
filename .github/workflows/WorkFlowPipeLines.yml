name: Distribute

on: [ push, pull_request ]

jobs:
  job1:
    name: Track Push or Pull
    runs-on: ubuntu-latest

    #set output variable for sharing with other job
    outputs:
      push: ${{ steps.push.outputs.BRANCH_NAME }}
      pull: ${{ steps.pull.outputs.BRANCH_NAME }}

    steps:
      - uses: actions/checkout@v2

      - name: Get Branch Name
        if: github.event_name == 'push'
        shell: bash
        id: push
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Get Branch Name if Pull Request
        if: github.event_name == 'pull_request'
        id: pull
        run: echo ""BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_OUTPUT


  job2:
    name: Start Job 2
    needs: job1
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      setupGradleBuild:
        name: Run Build Process According To Branch
        needs: job1
        runs-on: ubuntu-latest
        - uses: actions/checkout@v2

#
#        if: "contains(github.event.head_commit.message, '[build apk for firebase]')"
#        steps:
#          - uses: actions/checkout@v2
#
#          - uses: actions/setup-ruby@v1
#            with:
#              ruby-version: '2.6'
#
#          - name: Cache Ruby - Bundler
#            uses: actions/cache@v2
#            with:
#              path: vendor/bundle
#              key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
#              restore-keys: |
#                ${{ runner.os }}-gems-
#
#          - name: Cache Gradle
#            uses: actions/cache@v1
#            with:
#              path: ~/.gradle/caches/
#              key: cache-clean-gradle-${{ matrix.os }}-${{ matrix.jdk }}
#
#          - name: Cache Gradle Wrapper
#            uses: actions/cache@v1
#            with:
#              path: ~/.gradle/wrapper/
#              key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}
#
#          - name: Grant Permission to Execute
#            run: chmod +x gradlew
#
#          #       - name: Add firebase Plugin
#          #         run: fastlane add_plugin firebase_app_distribution
#
#          #       - name: Add firebase Plugin
#          #         run: fastlane add_plugin load_json
#
#          - name: Install bundle
#            run: |
#              bundle config path vendor/bundle
#              bundle install --jobs 4 --retry 3
#
#      BuildReleaseApk:
#        name: Build For Release
#        needs: job1
#        runs-on: ubuntu-latest
#        if: ${{needs.job1.outputs.push == 'master'}}
#        steps:
#          - uses: actions/checkout@v2
#
#          - name: Generate Build According to Branch
#            needs: setupGradleBuild
#            runs-on: ubuntu-latest
#
#          - name: Branch Name
#            shell: bash
#            env:
#              BRANCH_NAME1: ${{needs.job1.outputs.push}}
#            run: echo "the branch name is $BRANCH_NAME1 "
#
#
#          - name: Build
#            if: ${{env.IS_MASTER}}
#            run: ./gradlew build
#          - name: Assemble Release Bundle
#            if: env.IS_MASTER == 'true'
#            run: |
#              ./gradlew assembleRelease
#
#          - name: Distribute app with ðŸ”¥ App Distribution ðŸš€
#            if: env.IS_MASTER == 'true'
#            uses: r0adkll/sign-android-release@v1
#            with:
#              releaseDirectory: app/release
#              signingKeyBase64: ${{secrets.KEYSTORE_FILE}}
#              alias: ${{secrets.KEY_ALIAS}}
#              keyStorePassword: ${{secrets.STORE_PASSWORD}}
#              keyPassword: ${{secrets.KEY_PASSWORD}}
#
#          - name: Run fastlane command for release
#            if: env.IS_MASTER == 'true'
#            run: bundle exec fastlane release
#
#      BuildDebugApk:
#        name: Build For Staging
#        needs: job1
#        runs-on: ubuntu-latest
#
#        if: ${{needs.job1.outputs.push == 'staging'}}
#        steps:
#          - uses: actions/checkout@v2
#
#          - name: Create Debug apk file
#            if: env.IS_STAGING == 'true'
#            run: bundle exec fastlane staging








































#name: My Practice CICD
#
#on:
#  push:
#    branches: [ "master" ]
#
#
#jobs:
#  my-job:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Cache Gradle Wrapper
#        uses: actions/cache@v1
#        with:
#          path: ~/.gradle/wrapper/
#          key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}
#
#      - name: Grant Permission to Execute
#        run: chmod +x gradlew
#
#      - name: bundle install
#        run: |
#          bundle config path vendor/bundle
#          bundle install --jobs 4 --retry 3
#      - name: Create Firebase Service Credentials file
#        run: |
#          echo "$FIREBASE_CREDENTIALS" > firebase_credentials.json.b64
#          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
#        env:
#          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}
#
#      - name: Distribute app with ðŸ”¥ App Distribution ðŸš€
#        run: bundle exec fastlane distribution
#        env:
#          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
#
#
